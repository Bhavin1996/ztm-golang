//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal
//package channels

package main

import (
	"fmt"
	"math/rand"
	"time"
)

func longCalculationAlt(JobNumber int, result chan int) {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", JobNumber, duration)
	result <- (JobNumber * 30)
}

func main() {

	rand.New(rand.NewSource(time.Now().UnixNano()))
	var input int
	fmt.Scan(&input)
	//jobID := make(chan int, input)
	result := make(chan int, input)

	for i := 0; i < input; i++ {
		go longCalculationAlt(i, result)
	}

	sum := 0
	count := 0
	for {
		n := <-result
		sum += n
		count += 1
		if count == input {
			break
		}
	}
	fmt.Println("Total sum is", sum)
}
